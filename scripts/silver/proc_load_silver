/*
======================================================================================
Stored Propcedure: Load Silver Layer (Bronze -> Silver)
======================================================================================
Script Purpose:
  	This strored procedure performs the ETL (Extract, Transform, Load) process to 
	populate the 'silver' schema tables from the 'bronze' schema.
Action performed:
 	- Truncate Silver tables.
	- Insert transformed and cleansed data from Bronze into Silver tables.

Parameters:
  None.
  This stored procedure does not accept any parameters or return any values

Usage Example:
  EXEC Silver.load_bronze
======================================================================================
*/

CREATE OR ALTER PROCEDURE silver.load_silver AS 
BEGIN
	  DECLARE @start_time DATETIME , @end_time DATETIME , @batch_start_time DATETIME,@batch_end_time DATETIME;
	  BEGIN TRY
		  SET @batch_start_time = GETDATE();
			PRINT '=================================================';
			PRINT 'Loading Silver Layer';
			PRINT '=================================================';
	
		PRINT '-------------------------------------------------';
		PRINT 'Loading CRM Tables';
		PRINT '-------------------------------------------------';

		-- Lodaing silver.crm_cust_info
		SET @start_time = GETDATE();
		PRINT '>> Truncating table: silver.crm_cust_info';
		TRUNCATE TABLE silver.crm_cust_info;
		PRINT '>> Inserting Data Into: silver.crm_cust_info';
		INSERT INTO silver.crm_cust_info(    
			cst_id,
			cst_key,
			cst_firstname,
			cst_lastname,
			cst_marital_status,
			cst_gndr,
			cst_create_date
		)
		SELECT 
			cst_id ,
			cst_key,
			TRIM(cst_firstname) AS cst_firstname ,
			TRIM(cst_lastname) AS cst_lastname,
		CASE
			WHEN UPPER(TRIM(cst_marital_status)) = 'M' THEN 'Married'
			WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single'
			ELSE 'N/A'
		END AS cst_marital_status, -- Normalize martital status values to readable format
		CASE
			WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female'
			WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
			ELSE 'N/A'
		END AS cst_gndr, -- Normalize gender values to readable format
		cst_create_date
		FROM
		(
			SELECT * ,
			ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS Flag_last
			FROM bronze.crm_cust_info
			WHERE cst_id IS NOT NULL
		) t 
		WHERE Flag_last = 1; -- Select most recent record per customer
		SET @end_time=GETDATE();
        PRINT '>> Load Duration: ' +  CAST(DATEDIFF(second,@start_time,@end_time) AS NVARCHAR) + ' Seconds';
        PRINT '>> --------------'

		-- Loading silver.crm_prd_info
		SET @start_time = GETDATE();
		PRINT '>> Truncating table: silver.crm_prd_info'
		TRUNCATE TABLE silver.crm_prd_info

		PRINT '>> Inserting Data Into: silver.crm_prd_info'
		INSERT INTO silver.crm_prd_info (
			prd_id,
			cat_id,
			prd_key,
			prd_nm,
			prd_cost,
			prd_line,
			prd_start_dt,
			prd_end_dt
		)
		SELECT 
			prd_id,
			REPLACE(SUBSTRING(prd_key, 1, 5) ,'-','_') as cat_id, -- Extra category ID
			SUBSTRING(prd_key, 7, LEN(prd_key)) as prd_key, -- Extra Product Key
			prd_nm,
			COALESCE(prd_cost,0) AS prd_cost,
			CASE UPPER(TRIM(prd_line)) 
				WHEN 'M' THEN 'Mountain'
				WHEN 'R' THEN 'Road'
				WHEN 'S' THEN 'Other sales'
				WHEN 'T' THEN 'Touring'
				ELSE 'N/A'
			END AS prd_line, -- Map product line codes to descriptive values
			CAST(prd_start_dt AS DATE) prd_start_dt ,
			CAST(
				LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt ASC) - 1
				AS DATE
			) AS prd_end_dt -- Calculate end date as one day begore the next start date
		FROM bronze.crm_prd_info
		SET @end_time=GETDATE();
        PRINT '>> Load Duration: ' +  CAST(DATEDIFF(second,@start_time,@end_time) AS NVARCHAR) + ' Seconds';
        PRINT '>> --------------'

		-- loading silver.crm_sales_details
		SET @start_time = GETDATE();
		PRINT '>> Truncating table: silver.crm_sales_details'
		TRUNCATE TABLE silver.crm_sales_details

		PRINT '>> Inserting Data Into: silver.crm_sales_details'
		INSERT INTO silver.crm_sales_details (
			sls_ord_num,
			sls_prd_key,
			sls_cust_id,
			sls_order_dt,
			sls_ship_dt,
			sls_due_dt,
			sls_sales,
			sls_quantity,
			sls_price
		)
		SELECT 
		sls_ord_num,
		sls_prd_key,
		sls_cust_id,
		CASE WHEN sls_order_dt = 0 OR LEN(sls_order_dt) <> 8 THEN NULL 
			ELSE TRY_CAST(CAST(sls_order_dt AS VARCHAR) AS DATE)
		END AS sls_order_dt,
		CASE WHEN sls_ship_dt = 0 THEN NULL 
			ELSE TRY_CAST(CAST(sls_ship_dt AS VARCHAR) AS DATE)
		END AS sls_ship_dt,
		CASE WHEN sls_due_dt = 0 THEN NULL 
			ELSE TRY_CAST(CAST(sls_due_dt AS VARCHAR) AS DATE)
		END AS sls_due_dt,
		CASE WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales <> sls_quantity * ABS(sls_price)
				THEN sls_quantity * ABS(sls_price)
			 ELSE sls_sales
		END AS sls_sales, -- Recalculate sales if original value is missing or incorrect
		sls_quantity,
		CASE WHEN sls_price IS NULL OR sls_price <= 0 
				THEN sls_sales / NULLIF(sls_quantity,0)
			 ELSE sls_price -- Derive price if the original value is invalid
		END AS sls_price
		FROM bronze.crm_sales_details
		SET @end_time=GETDATE();
        PRINT '>> Load Duration: ' +  CAST(DATEDIFF(second,@start_time,@end_time) AS NVARCHAR) + ' Seconds';
        PRINT '>> --------------'

	    PRINT '-------------------------------------------------';
	    PRINT 'Loading ERP Tables';
	    PRINT '-------------------------------------------------';

		-- Loading silver.erp_CUST_AZ12
		SET @start_time = GETDATE();
		PRINT '>> Truncating table: silver.erp_CUST_AZ12'
		TRUNCATE TABLE silver.erp_CUST_AZ12 

		PRINT '>> Inserting Data Into: silver.erp_CUST_AZ12'
		INSERT INTO silver.erp_CUST_AZ12 (CID, BDATE, GEN)
		SELECT
			CASE
				WHEN CID LIKE 'NAS%' THEN SUBSTRING(CID, 4, LEN(CID)) -- Remove 'NAS' perfix if present
				ELSE CID
			END AS CID,
			CASE 
				WHEN BDATE > GETDATE() THEN NULL
				ELSE BDATE
			END AS BDATE, -- Set future birthdate to NULL
			CASE 
				WHEN UPPER(TRIM(GEN)) = 'F' THEN 'Female'
				WHEN UPPER(TRIM(GEN)) = 'M' THEN 'Male'
				WHEN UPPER(TRIM(GEN)) = 'Female' THEN 'Female'
				WHEN UPPER(TRIM(GEN)) = 'Male' THEN 'Male'
				ELSE 'N/A'
			END AS GEN --  Normalize gender values and handle unknown cases
		FROM bronze.erp_CUST_AZ12
		SET @end_time=GETDATE();
        PRINT '>> Load Duration: ' +  CAST(DATEDIFF(second,@start_time,@end_time) AS NVARCHAR) + ' Seconds';
        PRINT '>> --------------'

		-- Loading silver.erp_LOC_A101
		SET @start_time = GETDATE();
		PRINT '>> Truncating table: silver.erp_LOC_A101'
		TRUNCATE TABLE silver.erp_LOC_A101

		PRINT '>> Inserting Data Into: silver.erp_LOC_A1012'
		INSERT INTO SILVER.erp_LOC_A101 (CID, CNTRY)
		SELECT 
			REPLACE(CID, '-' , '') AS CID,
			CASE 
				WHEN UPPER(TRIM(CNTRY)) = 'DE' THEN 'Germany'
				WHEN UPPER(TRIM(CNTRY)) = 'USA'THEN 'United States'
				WHEN UPPER(TRIM(CNTRY)) = 'US' THEN 'United States'
				WHEN UPPER(TRIM(CNTRY)) = ''OR CNTRY IS NULL THEN 'N/A'
				ELSE (TRIM(CNTRY))
			END AS CNTRY -- Normalize and Handle missing or blank country codes
		FROM bronze.erp_LOC_A101
		SET @end_time=GETDATE();
        PRINT '>> Load Duration: ' +  CAST(DATEDIFF(second,@start_time,@end_time) AS NVARCHAR) + ' Seconds';
        PRINT '>> --------------'

		-- Loading silver.erp_PX_CAT_G1V2
		SET @start_time = GETDATE();
		PRINT '>> Truncating table: silver.erp_PX_CAT_G1V2'
		TRUNCATE TABLE silver.erp_PX_CAT_G1V2 

		PRINT '>> Inserting Data Into: silver.erp_PX_CAT_G1V2'
		INSERT INTO silver.erp_PX_CAT_G1V2 (ID, CAT, SUBCAT, MAINTENANCE)
		SELECT 
			ID,
			CAT,
			SUBCAT,
			MAINTENANCE
		FROM bronze.erp_PX_CAT_G1V2
		SET @end_time=GETDATE();
        PRINT '>> Load Duration: ' +  CAST(DATEDIFF(second,@start_time,@end_time) AS NVARCHAR) + ' Seconds';
        PRINT '>> --------------'

		SET @batch_end_time = GETDATE();
		PRINT'====================================';
        PRINT'Loading Silver Layer is completed';
        PRINT    '- Total Load Duration: '  + CAST(DATEDIFF(second,@batch_start_time,@batch_end_time) AS NVARCHAR) + ' Seconds';
        PRINT'====================================';

	END TRY 
	BEGIN CATCH
		PRINT '==============================================='
        PRINT 'ERROR OCCURED DURING LAODING THE SILVER LAYER'
        PRINT 'ERROR MESSAGE' + ERROR_MESSAGE();
        PRINT 'ERROR MESSAGE' + CAST(ERROR_NUMBER() AS NVARCHAR);
        PRINT 'ERROR MESSAGE' + CAST(ERROR_STATE() AS NVARCHAR);
        PRINT '==============================================='
	END CATCH
END;

